generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Ou o seu banco de dados de preferência
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER) // Added role field
  accounts      Account[]
  sessions      Session[]
  Pedido        Pedido[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Livro {
  id            String   @id @unique @default(uuid())
  codigo        String?  @unique
  livro         String? // Título
  autor         String?
  editora       String?
  anoPublicacao Int?
  isbn          String?  @unique
  sinopse       String?  @db.Text // Para descrição longa
  idioma        String?
  numeroPaginas Int?
  formato       String? // Ex: "Capa Comum", "eBook"
  imagemCapa    String?
  valor         String? // Ou Decimal
  categoria     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Pedido {
  id        String   @id @default(uuid())
  userId    String? // Opcional, para relacionar com usuário
  user      User?    @relation(fields: [userId], references: [id])
  status    String // Ex: "RESERVADO", "PAGO", "ENVIADO", "CANCELADO"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // itens PedidoItem[] // Para múltiplos itens por pedido
  // valorTotal Decimal?
}

// Enum para UserRole
enum UserRole {
  USER
  ADMIN
}
